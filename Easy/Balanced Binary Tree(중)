# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        
        if root==None:
            return True
        
        
        result = []
        
        def helper(root,depth=0):
            if root==None:
                return depth-1
            else:
                result.append(helper(root.left,depth+1)-helper(root.right,depth+1))
                return max(helper(root.left,depth+1),helper(root.right,depth+1))
            
        
        helper(root,0)
        
        if max(result)>1 or min(result)<-1:
            return False
        else:
            return True
        

###solution
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def height(self, root):
        if not root:
            return -1
        return 1 + max(self.height(root.left),self.height(root.right))
    
    def isBalanced(self, root: TreeNode) -> bool:
        if not root:
            return True
        
        return abs(self.height(root.left)-self.height(root.right))<2 and self.isBalanced(root.left) and self.isBalanced(root.right)
