class MyCircularQueue:

    def __init__(self, k: int):
        self.queue = [-1] * k
        self.head = 0
        self.tail = 0
        self.len = k
        
    def enQueue(self, value: int) -> bool:
        
        if self.isFull():
            return False
        else:
            self.queue[self.tail] = value
            self.tail = (self.tail + 1) % self.len 
            return True

    def deQueue(self) -> bool:
        if self.queue[self.head]==-1:
            return False
        else:
            tmp = self.queue[self.head]
            self.queue[self.head] = -1
            self.head = (self.head + 1) % self.len
            return True
        
    def Front(self) -> int:
        return self.queue[self.head]

    def Rear(self) -> int:
        rear = (self.tail + self.len - 1) % self.len
        return self.queue[rear]

    def isEmpty(self) -> bool:
        if -1 in self.queue and self.head==self.tail:
            return True
        else:
            return False
        
    def isFull(self) -> bool:
        if -1 not in self.queue and self.head==self.tail:
            return True
        else:
            return False
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
