class Solution:
    def kthGrammar(self, N: int, K: int) -> int:
        def helper(curr_list,start,end):
            if start==0:
                curr_list.append(0)
                return helper(curr_list,start+1,end)
            else:
                if start!=end:
                    tmp = curr_list
                    curr_list = []
                    for i in range(len(tmp)):
                        if tmp[i]==0:
                            curr_list.extend((0,1))
                        else:
                            curr_list.extend((1,0))
                    return helper(curr_list,start+1,end)
                else:
                    return curr_list
        curr_list=[]
        return helper(curr_list,0,N)[K-1]
        
        
  ###solution 참고
  def kthGrammar(self, N: int, K: int) -> int:
        lastrow='0'
        rows = []
        while len(rows)<N:
            lastrow = ''.join('01' if x=='0' else '10' for x in lastrow)
            rows.append(lastrow)
        return int(rows[-1][K-1])
        
        
 class Solution:
    def kthGrammar(self, N: int, K: int) -> int:
        if N==1:
            return 0
        if K%2==0:
            return (1-K%2)^self.kthGrammar(N-1,int(K/2))
        else:
            return (1-K%2)^self.kthGrammar(N-1,int((K+1)/2))
