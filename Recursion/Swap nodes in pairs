class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        dummy = ListNode(0)
        dummyHead = dummy
        def helper(dummy,head):
            if head==None:
                return None
            elif head.next==None:
                dummy.next = ListNode(head.val)
                dummy = dummy.next
            else:
                prev_val = head.val
                curr_val = head.next.val
                dummy.next = ListNode(curr_val)
                dummy = dummy.next
                dummy.next = ListNode(prev_val)
                dummy = dummy.next
                helper(dummy,head.next.next)
        helper(dummy,head)
        return dummyHead.next


##Solution 참고 및 iterative solution:
def swapPairs(self, head: ListNode) -> ListNode:
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # Dummy node acts as the prevNode for the head node
        # of the list and hence stores pointer to the head node.
        dummy = ListNode(-1)
        dummy.next = head

        prev_node = dummy

        while head and head.next:

            # Nodes to be swapped
            first_node = head;
            second_node = head.next;

            # Swapping
            prev_node.next = second_node
            first_node.next = second_node.next
            second_node.next = first_node

            # Reinitializing the head and prev_node for next swap
            prev_node = first_node
            head = first_node.next

        # Return the new head node.
        return dummy.next
